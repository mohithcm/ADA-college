#include <stdio.h>
#include <stdbool.h>
#include <limits.h>
#define MAX 100
int minDistance(int distance[], bool visited[], int n) {
    int minDist = 999, minDistVertex = -1;
    for (int v = 0; v < n; ++v)
        if (!visited[v] && distance[v] < minDist) {
            minDist = distance[v];
            minDistVertex = v;
        }
    return minDistVertex;
}
void dijkstra(int graph[MAX][MAX], int n, int start, int distance[]) {
    bool visited[MAX] = { false };
    for (int i = 0; i < n; ++i)
        distance[i] = 999;
    distance[start] = 0;
    for (int count = 0; count < n - 1; ++count) {
        int u = minDistance(distance, visited, n);
        visited[u] = true;
        for (int v = 0; v < n; ++v)
            if (!visited[v] && graph[u][v] && distance[u] != 999 && distance[u] + graph[u][v] < distance[v])
                distance[v] = distance[u] + graph[u][v];
    }
}
int main() {
analysis();
    int graph[MAX][MAX];
    int n, start;
    printf("Enter the number of vertices: ");
    scanf("%d", &n);
    printf("Enter the adjacency matrix:\n");
    for (int i = 0; i < n; ++i)
        for (int j = 0; j < n; ++j)
            scanf("%d", &graph[i][j]);
    printf("Enter the starting vertex: ");
    scanf("%d", &start);
    int distance[MAX];
    dijkstra(graph, n, start, distance);
    printf("Shortest distances from vertex %d:\n", start);
    for (int i = 0; i < n; ++i)
        printf("Vertex %d -> Distance: %d\n", i, distance[i]);
    return 0;
}
#define n1 4
#define n2 8
void analysis() {
int n;
FILE *f;
f = fopen("BC.txt", "a");
for (n = n1; n <= n2; n += 1) {
fprintf(f, "%d\t%d\n", n, (n*n));
}
fclose(f);
}
